name: Precompile binaries
on:
  push:
   branches:
      - main
      - release/**
      - jb/build/enum-binaries
  workflow_dispatch:
    inputs:
      commit:
        description: If the commit you want to test isn't the head of a branch, provide its SHA here
        required: false
jobs:
  precompile-bindings:
    name: ${{ matrix.os }} (node=${{ matrix.node || matrix.container }}, arch=${{ matrix.arch || matrix.container }}, compiler=${{ contains(matrix.container, 'alpine') && 'musl' || 'glibc'  }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # We will prebuild binaries for node v18 on linux
          # with different versions of glibc to ensure that
          # the binaries are compatible with a wide range of
          # distributions and container images.

          # linux x64 glibc
          - os: ubuntu-20.04
            node: 14
          - os: ubuntu-20.04
            node: 16
          - os: ubuntu-20.04
            node: 18

          # linux x64 musl
          - os: ubuntu-20.04
            container: node:14-alpine3.16
            node: 14
          - os: ubuntu-20.04
            container: node:16-alpine3.16
            node: 16
          - os: ubuntu-20.04
            container: node:18-alpine3.17
            node: 18

          # Since github does not support arm64 runners, we cross compile from x64 using node_gyp --target_arch=arm64
          # linux arm64 glibc
          - os: ubuntu-20.04
            arch: arm64
            node: 14
          - os: ubuntu-20.04
            arch: arm64
            node: 16
          - os: ubuntu-20.04
            arch: arm64
            node: 18

          # linux arm64 musl
          - os: ubuntu-20.04
            container: node:14-alpine3.16
            arch: arm64
            node: 14
          - os: ubuntu-20.04
            container: node:16-alpine3.16
            arch: arm64
            node: 16
          - os: ubuntu-20.04
            arch: arm64
            container: node:18-alpine3.17
            node: 18

            # macos x64
          - os: macos-11
            node: 16
            arch: x64
          - os: macos-11
            node: 18
            arch: x64
            # windows x86 
            # We are not precompiling binaries for node v14 on windows x86 and x64
            # because the combined size of those two binaries is 2x the size of all the
            # other binaries combined.
          - os: windows-2019
            node: 16
            arch: x86
          - os: windows-2019
            node: 18
            arch: x86
            # windows x64
          - os: windows-2019
            node: 16
            arch: x64
          - os: windows-2019
            node: 18
            arch: x64
          # For some reason it seems like it takes forever for 
          # the macos-m1 runners to start up, so we'll just skip it
          # - os: macos-m1
          #   node: 18
          #   arch: arm64
    # Build artifacts are only needed for releasing workflow.
    # if: startsWith(github.ref, 'refs/heads/release/')
    # alpine build dependencies
    steps:
      - name: setup (alpine)
        if: contains(matrix.container, 'alpine')
        run: |
          apk add --no-cache build-base python3 g++ make curl

      - name: Check out current commit
        uses: actions/checkout@v3
        with:
          ref: ${{ env.HEAD_COMMIT }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm install --unsafe-perm --build-from-source

      # configure build test copy x64
      - name: Configure gyp
        if: matrix.arch != 'arm64'
        run: npm run build:configure

      - name: Build bindings
        if: matrix.arch != 'arm64'
        run: npm run build:bindings

      - name: Test
        if: matrix.arch != 'arm64'
        run: npm run test --silent
      
      # configure build test copy arm64
      - name: setup (arm64, ${{ contains(matrix.container, 'alpine') && 'musl' || 'glibc'  }})
        if: matrix.arch == 'arm64' && !contains(matrix.container, 'alpine')
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          
      - name: "Configure gyp (arm64, ${{ contains(matrix.container, 'alpine') && 'musl' || 'glibc'  }})"
        if: matrix.arch == 'arm64'
        run: npm run build:configure:arm64

      - name: Setup musl cross compiler
        if: contains(matrix.container, 'alpine')
        run: |
          curl -OL https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xzvf aarch64-linux-musl-cross.tgz
          $(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc --version

      - name: "Build bindings (arm64, ${{ contains(matrix.container, 'alpine') && 'musl' || 'glibc'  }})"
        if: matrix.arch == 'arm64' && contains(matrix.container, 'alpine')
        run: |
          CC=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc \
          CXX=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-g++ \
          BUILD_ARCH=arm64 npm run build:bindings

      - name: "Build bindings (arm64, ${{ contains(matrix.container, 'alpine') && 'musl' || 'glibc'  }})"
        if: matrix.arch == 'arm64' && !contains(matrix.container, 'alpine')
        run: |
          BUILD_ARCH=arm64 npm run build:bindings:arm64

      # This will obviously not work as we run on x64, but we should
      # investigate into adding qemu or equiv to run tests on compiled binaries
      # - name: Test (aarch64)
      #   if: matrix.arch == 'arm64'
      #   run: BUILD_ARCH=arm64 npm run test

      # continue with common steps
      - name: Log binary
        run: du -sh lib/*

      - name: Archive binary
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ github.sha }}
          path: |
            ${{ github.workspace }}/lib/*.node
  test-bundle:
    runs-on: ubuntu-latest
    needs: [precompile-bindings]
    # if: startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci
      - run: npm run build:lib
      - uses: actions/download-artifact@v3
        with: 
          name: binaries-${{ github.sha }}
          path: lib/
      - run: ls -l lib/
      - run: npm run test:bundle

  build-and-pack:
    runs-on: ubuntu-latest
    needs: [precompile-bindings, test-bundle]
    # Build artifacts are only needed for releasing workflow.
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: npm ci

      - run: npm run build:lib

      - uses: actions/download-artifact@v3
        with: 
          name: binaries-${{ github.sha }}
          path: lib/
      - run: ls -l lib/
      - run: npm pack

      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.sha }}
          path: |
            ${{ github.workspace }}/*.tgz

